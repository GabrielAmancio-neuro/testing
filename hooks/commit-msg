#!/usr/bin/env python
import sys
from enum import Enum

commit_types = ["FIX", "WIP", "ADD", "CREATE", "CHANGE", "IMPROVE", "REMOVE"]


# https://stackoverflow.com/questions/287871/how-to-print-colored-text-to-the-terminal
class bcolors(str, Enum):
    OK = "\033[92m"
    INFO = "\033[94m"
    WARNING = "\033[93m"
    ERROR = "\033[91m"
    BOLD = "\033[1m"
    ENDC = "\033[0m"


class Level(str, Enum):
    OK = "OK"
    INFO = "INFO"
    WARNING = "WARNING"
    ERROR = "ERROR"


def print_with_color(message: str, level: Level):
    print(
        bcolors[level] + bcolors.BOLD + f"{level}: [Policy] " + message + bcolors.ENDC
    )


def get_key_word(message: str):
    split = message[0].split(":")
    return split[0]


def check_commit_msg_pattern():
    # The argument passed to the "commit-msg" hook is the path to a
    # temporary file that contains the commit message written by the
    # developer.
    msg_temp_file = sys.argv[1]

    with open(msg_temp_file, "r") as f_msg:
        lines = f_msg.readlines()

    # Remove the comment lines in the commit message.
    lines = [l for l in lines if not l.strip().startswith("#")]

    has_warning = False
    if lines[0].find(":") == -1:
        message = "There should be a key word in the beginnig of the commit to clarify his objective"
        print_with_color(message, Level.ERROR)
        return 1

    if get_key_word(lines) not in commit_types:
        message = "The key word of the commit should be one of these: FIX, WIP, ADD, CREATE, CHANGE, IMPROVE, REMOVE"
        print_with_color(message, Level.ERROR)
        return 1

    if not has_warning:
        message = "The commit message has the required pattern."
        print_with_color(message, Level.OK)
        return 0


if __name__ == "__main__":
    raise SystemExit(check_commit_msg_pattern())
